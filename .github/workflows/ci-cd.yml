name: Modex Platform CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AZURE_CONTAINER_REGISTRY: devmodexacr
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

  test-typescript-services:
    name: Test TypeScript Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, enrollment, payment, analytics]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          npm ci

      - name: Run ESLint
        run: |
          cd services/${{ matrix.service }}
          npm run lint

      - name: Run TypeScript check
        run: |
          cd services/${{ matrix.service }}
          npm run build

      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          npm test
        env:
          NODE_ENV: test

  test-go-services:
    name: Test Go Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [course-management, assessment, content-delivery, notification]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run Go mod tidy
        run: |
          cd services/${{ matrix.service }}
          go mod tidy

      - name: Run Go vet
        run: |
          cd services/${{ matrix.service }}
          go vet ./...

      - name: Run staticcheck
        run: |
          cd services/${{ matrix.service }}
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage.out
          flags: ${{ matrix.service }}

  build-images:
    name: Build Container Images
    needs: [security-scan, test-typescript-services, test-go-services]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service: 
          - api-gateway
          - course-management
          - enrollment
          - assessment
          - payment
          - analytics
          - content-delivery
          - notification

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ matrix.service }}:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  terraform-plan:
    name: Terraform Plan
    needs: [security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd infrastructure/terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -no-color
        env:
          TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [build-images]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve
        env:
          TF_VAR_environment: prod
          TF_VAR_postgres_admin_password: ${{ secrets.POSTGRES_ADMIN_PASSWORD }}

  deploy-services:
    name: Deploy to AKS
    needs: [deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group $(terraform -chdir=infrastructure/terraform output -raw resource_group_name) --name $(terraform -chdir=infrastructure/terraform output -raw aks_cluster_name)

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Deploy services to AKS
        run: |
          helm upgrade --install modex-platform infrastructure/helm/platform \
            --set image.tag=${{ github.sha }} \
            --set environment=production \
            --set postgres.host=$(terraform -chdir=infrastructure/terraform output -raw postgres_server_fqdn) \
            --set redis.host=$(terraform -chdir=infrastructure/terraform output -raw redis_hostname) \
            --wait --timeout=10m

  notify:
    name: Notify Deployment
    needs: [deploy-services]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-services.result }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
